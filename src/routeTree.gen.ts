/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LogoutRouteImport } from './routes/logout'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthedRouteImport } from './routes/_authed'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthCallbackRouteImport } from './routes/auth/callback'
import { Route as AuthAuthCodeErrorRouteImport } from './routes/auth/auth-code-error'
import { Route as AuthedDashboardRouteRouteImport } from './routes/_authed/dashboard/route'
import { Route as AuthedDashboardIndexRouteImport } from './routes/_authed/dashboard/index'

const LogoutRoute = LogoutRouteImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedRoute = AuthedRouteImport.update({
  id: '/_authed',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthCallbackRoute = AuthCallbackRouteImport.update({
  id: '/auth/callback',
  path: '/auth/callback',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthAuthCodeErrorRoute = AuthAuthCodeErrorRouteImport.update({
  id: '/auth/auth-code-error',
  path: '/auth/auth-code-error',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedDashboardRouteRoute = AuthedDashboardRouteRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedDashboardIndexRoute = AuthedDashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthedDashboardRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/dashboard': typeof AuthedDashboardRouteRouteWithChildren
  '/auth/auth-code-error': typeof AuthAuthCodeErrorRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/dashboard/': typeof AuthedDashboardIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/auth/auth-code-error': typeof AuthAuthCodeErrorRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/dashboard': typeof AuthedDashboardIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/_authed/dashboard': typeof AuthedDashboardRouteRouteWithChildren
  '/auth/auth-code-error': typeof AuthAuthCodeErrorRoute
  '/auth/callback': typeof AuthCallbackRoute
  '/_authed/dashboard/': typeof AuthedDashboardIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/logout'
    | '/dashboard'
    | '/auth/auth-code-error'
    | '/auth/callback'
    | '/dashboard/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/logout'
    | '/auth/auth-code-error'
    | '/auth/callback'
    | '/dashboard'
  id:
    | '__root__'
    | '/'
    | '/_authed'
    | '/login'
    | '/logout'
    | '/_authed/dashboard'
    | '/auth/auth-code-error'
    | '/auth/callback'
    | '/_authed/dashboard/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthedRoute: typeof AuthedRouteWithChildren
  LoginRoute: typeof LoginRoute
  LogoutRoute: typeof LogoutRoute
  AuthAuthCodeErrorRoute: typeof AuthAuthCodeErrorRoute
  AuthCallbackRoute: typeof AuthCallbackRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/logout': {
      id: '/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/callback': {
      id: '/auth/callback'
      path: '/auth/callback'
      fullPath: '/auth/callback'
      preLoaderRoute: typeof AuthCallbackRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/auth-code-error': {
      id: '/auth/auth-code-error'
      path: '/auth/auth-code-error'
      fullPath: '/auth/auth-code-error'
      preLoaderRoute: typeof AuthAuthCodeErrorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed/dashboard': {
      id: '/_authed/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthedDashboardRouteRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/dashboard/': {
      id: '/_authed/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof AuthedDashboardIndexRouteImport
      parentRoute: typeof AuthedDashboardRouteRoute
    }
  }
}

interface AuthedDashboardRouteRouteChildren {
  AuthedDashboardIndexRoute: typeof AuthedDashboardIndexRoute
}

const AuthedDashboardRouteRouteChildren: AuthedDashboardRouteRouteChildren = {
  AuthedDashboardIndexRoute: AuthedDashboardIndexRoute,
}

const AuthedDashboardRouteRouteWithChildren =
  AuthedDashboardRouteRoute._addFileChildren(AuthedDashboardRouteRouteChildren)

interface AuthedRouteChildren {
  AuthedDashboardRouteRoute: typeof AuthedDashboardRouteRouteWithChildren
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedDashboardRouteRoute: AuthedDashboardRouteRouteWithChildren,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthedRoute: AuthedRouteWithChildren,
  LoginRoute: LoginRoute,
  LogoutRoute: LogoutRoute,
  AuthAuthCodeErrorRoute: AuthAuthCodeErrorRoute,
  AuthCallbackRoute: AuthCallbackRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
